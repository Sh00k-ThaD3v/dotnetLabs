@using Microsoft.AspNetCore.Components
@inherits LayoutComponentBase

@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
@inject ILanguageContainerService language

<BFUStack Horizontal="true" Style="width:100%;">
    <BFUResponsiveLayout MinWidth="ResponsiveMode.Medium.ToMinCssValue()">
        <BFUStackItem Grow="0" DisableShrink="true" Style="height:100%;overflow:hidden;">
            <NavMenu />
        </BFUStackItem>
    </BFUResponsiveLayout>


    <BFUStackItem Grow="1" Style="overflow:hidden">
        <BFUStack VerticalFill="true" Style="width:100%;">

            <BFUResponsiveLayout MaxWidth="ResponsiveMode.Medium.ToMaxCssValue()">
                <BFUStackItem Grow="0" VerticalFill="false">
                    <BFUIconButton IconName="GlobalNavButton" OnClick=@ShowMenu />
                </BFUStackItem>
            </BFUResponsiveLayout>

            <BFUResponsiveLayout MinWidth="ResponsiveMode.Medium.ToMinCssValue()">
                <BFUStack Horizontal="true" HorizontalAlign="Alignment.SpaceBetween" VerticalAlign="Alignment.Center" Style="width:100%">
                    <BFUStackItem Grow="0" VerticalFill="false">
                        <div class="top-row">
                            @*<BFULink Href="https://github.com/BlazorFluentUI/BlazorFluentUI" Target="_blank">View GitHub repo of BlazorFluentUI...</BFULink>*@
                        </div>
                    </BFUStackItem>
                    <BFUStackItem DisableShrink="true">
                        @*<BFUGlobalCS CreateGlobalCss=@(()=>CreateGlobalCss(ThemeProvider.Theme))/>*@
                        @*<BFUToggle Checked=customTheme CheckedChanged="@SwitchTheme" OnText="Dark Theme" OffText="Default Theme" />*@

                        <AuthorizeView>
                            <Authorized>
                                @{
                                    string greeting = $"{language["Auth:Welcome"]} {context.User.FindFirst(System.Security.Claims.ClaimTypes.GivenName).Value}";
                                }
                                <BFUPrimaryButton Text="@greeting"
                                                  Split="true"
                                                  MenuItems="MenuProperties"
                                                  OnClick=@(() => OnClickHandler("Logout")) />
                            </Authorized>
                            <NotAuthorized>
                                <BFUPrimaryButton Text="@language["Auth:Register"]"
                                                  Split="true"
                                                  MenuItems="AccountMenuProperties"
                                                  OnClick=@(() => navigationManager.NavigateTo("/auth/register")) />
                            </NotAuthorized>
                        </AuthorizeView>

                    </BFUStackItem>
                </BFUStack>
            </BFUResponsiveLayout>

            <BFUStackItem Grow="1" Tokens="new BFUStackItemTokens { Padding = ((int)CurrentMode <= (int)ResponsiveMode.Medium ? 10 : 0) }" Style="overflow-y:auto;">
                @Body
            </BFUStackItem>
        </BFUStack>

        <BFUResponsiveLayout MaxWidth="ResponsiveMode.Medium.ToMaxCssValue()">
            <BFUPanel Type=@PanelType.SmallFixedNear OnDismiss=@(() => isPanelOpen = false) IsOpen=@isPanelOpen IsLightDismiss="true">
                <NavigationTemplate>
                    <BFUIconButton IconName="GlobalNavButton" OnClick=@(() => isPanelOpen = false) />
                    @*<BFULink Href="https://github.com/BlazorFluentUI/BlazorFluentUI" Target="_blank">View GitHub repo of BlazorFluentUI...</BFULink>*@
                </NavigationTemplate>
                <ChildContent>
                    <NavMenu OnLinkClicked=@OnNavLinkClick />
                </ChildContent>
            </BFUPanel>
        </BFUResponsiveLayout>

    </BFUStackItem>

</BFUStack>

@code {

    [Inject]
    public ThemeProvider ThemeProvider { get; set; }

    private bool? customTheme;

    private Rule ScrollbarRule = new Rule();
    //private ICollection<IRule> DarkThemeLocalRules { get; set; } = new System.Collections.Generic.List<IRule>();

    protected override void OnInitialized()
    {
        customTheme = ThemeProvider.Theme.Palette.GetType() == typeof(DefaultPaletteDark);

        base.OnInitialized();
    }

    #region Theming
    private ICollection<IRule> CreateGlobalCss(ITheme theme)
    {
        var themeGlobalRules = new HashSet<IRule>();
        if (customTheme.GetValueOrDefault())
        {
            // for Firefox
            themeGlobalRules.Add(new Rule()
            {
                Selector = new CssStringSelector() { SelectorName = "body" },
                Properties = new CssString()
                {
                    Css = $"scrollbar-color:{ThemeProvider.Theme.Palette.NeutralTertiary} {ThemeProvider.Theme.Palette.NeutralLight};"
                }
            });

        }
        else
        {
            //// for webkit browsers
            //// for webkit browsers
            //themeGlobalRules.Add(new Rule()
            //{
            //    Selector = new CssStringSelector() { SelectorName = "*::-webkit-scrollbar" },
            //    Properties = new CssString()
            //    {
            //        Css = $"width: inherit;"
            //    }
            //});
            //themeGlobalRules.Add(new Rule()
            //{
            //    Selector = new CssStringSelector() { SelectorName = "*::-webkit-scrollbar-track" },
            //    Properties = new CssString()
            //    {
            //        Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralLight};"
            //    }
            //});
            //themeGlobalRules.Add(new Rule()
            //{
            //    Selector = new CssStringSelector() { SelectorName = "*::-webkit-scrollbar-thumb" },
            //    Properties = new CssString()
            //    {
            //        Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralTertiary};" +
            //          $"border-color: {ThemeProvider.Theme.Palette.NeutralLight};"
            //    }
            //});

        }

        // for webkit browsers
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar" },
            Properties = new CssString()
            {
                Css = $"width: inherit;"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-button" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralLighter};" +
                      $"color:{ThemeProvider.Theme.SemanticColors.ButtonBorder}"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-button:hover" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralTertiary};"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-button:active" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralSecondary};"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-button:vertical:decrement::after" },
            Properties = new CssString()
            {
                Css = $"border-width:0px 8px 8px 8px;" +
                    $"border-color:transparent transparent {ThemeProvider.Theme.Palette.NeutralLighter} transparent;" +
                    $"content:'**';"
            }
        });

        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-track" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralLighter};"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-thumb" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralTertiaryAlt};" +
                  $"border: 2px solid {ThemeProvider.Theme.Palette.NeutralLighter};"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-thumb:hover" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralTertiary};"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-thumb:active" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralSecondary};"
            }
        });


        return themeGlobalRules;
    }



    private Task SwitchTheme(bool? checkedState)
    {
        customTheme = checkedState;
        if (checkedState.GetValueOrDefault())
        {
            var palette = new DefaultPaletteDark();
            ThemeProvider.UpdateTheme(palette, new DefaultSemanticColorsDark(palette), new DefaultSemanticTextColorsDark(palette));

        }
        else
        {
            ThemeProvider.UpdateTheme(new DefaultPalette());
        }
        return Task.CompletedTask;
    }
    #endregion

    private bool isMenuCollapsed = true;
    private bool isPanelOpen = false;

    [CascadingParameter] public ResponsiveMode CurrentMode { get; set; }

    void ShowMenu()
    {
        isPanelOpen = true;
    }

    void HideMenu()
    {
        isPanelOpen = false;
    }

    void OnNavLinkClick(BFUNavLink linkBase)
    {
        isPanelOpen = false;
    }

    #region User Area

    IEnumerable<BFUContextualMenuItem> MenuProperties;
    IEnumerable<BFUContextualMenuItem> AccountMenuProperties;

    protected async override Task OnInitializedAsync()
    {
        MenuProperties = new System.Collections.Generic.List<BFUContextualMenuItem>()
{
            new BFUContextualMenuItem()
            {
                Key = "logout",
                Text = language["Auth:Logout"],
                IconName="User",
                OnClick = async (e) => await LogoutAsync(e)
            },
        };

        AccountMenuProperties = new List<BFUContextualMenuItem>()
        {
            new BFUContextualMenuItem
            {
                Key = "login",
                Text = language["Auth:Login"],
                OnClick = (e) => navigationManager.NavigateTo("/auth/login")
            }
        };

        language.InitLocalizedComponent(this); 

    }

    private async Task LogoutAsync(ItemClickedArgs e)
    {
        var localAuthStateProvider = (LocalAuthenticationStateProvider)authStateProvider;
        await localAuthStateProvider.LogoutAsync();

        navigationManager.NavigateTo("/auth/login");
    }

    private void OnClickHandler(string button)
    {
        Console.WriteLine(button);
    }



    #endregion
}